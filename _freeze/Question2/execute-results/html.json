{
  "hash": "cf5bc2866e206e8ff6d84c754e437def",
  "result": {
    "markdown": "\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#data from csvs (will need to change location stuff)\nfires_full <- read_csv(\"~/Documents/GitHub/project01-ojkp/air data/fires_full.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 2191 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl  (1): tot_ProAcres\ndate (1): ReportDate\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\npollutants_pdx <- read_csv(\"~/Documents/GitHub/project01-ojkp/air data/pollutants_pdx.csv\", \n    col_types = cols(Source = col_skip(), \n        `Site ID` = col_skip(), POC = col_skip(), \n        `Site Name` = col_skip(), DAILY_OBS_COUNT = col_skip(), \n        PERCENT_COMPLETE = col_skip(), AQS_PARAMETER_CODE = col_skip(), \n        CBSA_CODE = col_skip(), CBSA_NAME = col_skip(), \n        STATE_CODE = col_skip(), STATE = col_skip(), \n        COUNTY_CODE = col_skip(), COUNTY = col_skip(), \n        SITE_LATITUDE = col_skip(), SITE_LONGITUDE = col_skip()))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#pollutant data stuff/wrangling\npollutants_pdx <- pollutants_pdx %>%\n  rename(NO2_reading = \"Daily Max 1-hour NO2 Concentration\",\n         Ozone_reading = \"Daily Max 8-hour Ozone Concentration\",\n         CO_reading = \"Daily Max 8-hour CO Concentration\",\n         SO2_reading = \"Daily Max 1-hour SO2 Concentration\",\n         PM2.5_reading = \"Daily Mean PM2.5 Concentration\",\n         )\n\npollutants_pdx_melt <- pollutants_pdx %>%\n  pivot_longer(cols = c(NO2_reading, CO_reading, SO2_reading, PM2.5_reading, Ozone_reading),\n               names_to = \"variable\",\n               values_to = \"reading\") %>%\n  filter(!is.na(reading))\n\npollutants_pdx_melt$Date <- mdy(pollutants_pdx_melt$Date)\n\npollutants_pdx_melt <- pollutants_pdx_melt %>%\n  mutate(year = year(Date))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#graphing fires\n#considering changing severity of fire seasons over years\nggplot(data = fires_full, aes(x=ReportDate, y = tot_ProAcres)) +\n  geom_line()\n```\n\n::: {.cell-output-display}\n![](Question2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nfires_full <- fires_full %>%\n  mutate(year = year(ReportDate))\n\nggplot(data = fires_full, aes(x=ReportDate, y = tot_ProAcres)) +\n  geom_line() +\n  facet_wrap(~year, scales = \"free_x\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5))\n```\n\n::: {.cell-output-display}\n![](Question2_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# In the proposal we said we'd plot observations for the first, 15th, and last day of each month across one year, and observe whether there is a stark increase in pollutant concentrations during the wildfire season (July-September) and have multiple lines to see which pollutants in particular increase. \n#instead of separate lines, separate graphs for unit/interpretability reasons\n\n#data for first 15th and last day of month\npollutants_FML <- pollutants_pdx_melt %>%\n  mutate(day = day(Date)) %>%\n  filter(day == 1 | day == 15 | day == max(day)) %>%\n  select(-day)  \n\n#2017, considering trends in just one year, can be altered for whichever year\nggplot(pollutants_FML %>% \n         filter(year == 2017), aes(x = Date, y = reading, color = variable)) +\n  geom_line() +\n  facet_wrap(~ variable + year, scales = \"free\") +\n  labs(title = \"Observations for First, 15th, and Last Day of Each Month\",\n       x = \"Date\", y = \"Reading\") +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5))\n```\n\n::: {.cell-output-display}\n![](Question2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#on one super mega huge giant ggplot to see how this holds up across years\nggplot(pollutants_FML, aes(x = Date, y = reading, color = variable)) +\n  geom_line() +\n  facet_wrap(~ variable + year, scales = \"free\") +\n  labs(title = \"Observations for First, 15th, and Last Day of Each Month\",\n       x = \"Date\", y = \"Reading\") +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5))\n```\n\n::: {.cell-output-display}\n![](Question2_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#okay... \n#this is a visualization with all the pollutants over all the years compared to wildfires. surely there's something to be gained from this. maybe not tho.\n\nplots <- lapply(unique(pollutants_pdx_melt$variable), function(var) {\n  ggplot(data = pollutants_pdx_melt[pollutants_pdx_melt$variable == var, ], aes(x = Date, y = reading)) +\n    geom_line() +\n    labs(title = paste(\"Reading for\", var),\n         x = \"Date\", y = \"Reading\")\n})\n\nfire_plot <- ggplot(data = fires_full, aes(x = ReportDate, y = tot_ProAcres)) +\n  geom_line(color = \"red\") +\n  labs(title = \"Total Protected Acres Burnt\",\n       x = \"Date\", y = \"Total Protected Acres\")\n\nlibrary(gridExtra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'gridExtra'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:dplyr':\n\n    combine\n```\n:::\n\n```{.r .cell-code}\ngrid.arrange(arrangeGrob(grobs = plots, ncol = 1), fire_plot, heights = c(4, 1))\n```\n\n::: {.cell-output-display}\n![](Question2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#this is that same nonsense but just for 2020:\npollutants_2020 <- pollutants_pdx_melt %>%\n  filter(year(Date) == 2020)\n\nplots <- lapply(unique(pollutants_2020$variable), function(var) {\n  ggplot(data = pollutants_2020[pollutants_2020$variable == var, ], aes(x = Date, y = reading)) +\n    geom_line() +\n    labs(title = paste(\"Reading for\", var, \"in 2020\"),\n         x = \"Date\", y = \"Reading\")\n})\n\nfire_plot <- ggplot(data = fires_full[fires_full$year == 2020, ], aes(x = ReportDate, y = tot_ProAcres)) +\n  geom_line(color = \"red\") +\n  labs(title = \"Total Protected Acres Burnt in 2020\",\n       x = \"Date\", y = \"Total Protected Acres\")\n\ngrid.arrange(arrangeGrob(grobs = plots, ncol = 1), fire_plot, heights = c(4, 1))\n```\n\n::: {.cell-output-display}\n![](Question2_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#summary statistics\n#correlation in 2020 between protected area burnt and each pollutant readings\n\n#aggregating data + merging\npollutant_small20 <- pollutants_2020 %>%\n  group_by(Date, variable) %>%\n  summarise(reading = mean(reading, na.rm = TRUE)) %>%\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'Date'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nfires_small20 <- fires_full[fires_full$year == 2020, ] %>%\n  group_by(ReportDate) %>%\n  summarise(tot_ProAcres = sum(tot_ProAcres, na.rm = TRUE)) %>%\n  ungroup()\n\nmerged_data <- merge(pollutant_small20, fires_small20, by.x = \"Date\", by.y = \"ReportDate\", all = TRUE)\n\n\n# Calculate correlation coefficients for each pollutant variable\ncorrelations <- lapply(unique(merged_data$variable), function(var) {\n  pollutant_data <- merged_data %>%\n    filter(variable == var)\n  correlation <- cor.test(pollutant_data$reading, pollutant_data$tot_ProAcres)$estimate\n  data.frame(Pollutant = var, Correlation = correlation)\n})\n\ncorrelations_df <- do.call(rbind, correlations)\n\nprint(correlations_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Pollutant   Correlation\ncor     CO_reading  0.0004795176\ncor1   NO2_reading -0.0679820673\ncor2 Ozone_reading  0.1522080235\ncor3 PM2.5_reading  0.0060174558\ncor4   SO2_reading -0.0150541533\n```\n:::\n:::\n",
    "supporting": [
      "Question2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}