#The wonderful code below combines all of the avg_XPOLLUTANT datasets from data_cleanup, into one dataframe, adding a character-type `year` variable, a numeric `month` variable, and a numeric `month by year` variable(Jan-Dec, coded as 1-12). DO NOT RUN THIS CODE if avgAll and avgAll2020 are present in the air data folder.
avgAll <- left_join(avgpm25, avg_so2, by="month_year")%>%
left_join(., avg_ozone, by="month_year") %>%
left_join(., avg_no2, by="month_year") %>%
left_join(., avg_co, by="month_year")
library(tidyverse)
library(lubridate)
library(dplyr)
library(readr)
library(reshape2)
library(viridis)
#The wonderful code below combines all of the avg_XPOLLUTANT datasets from data_cleanup, into one dataframe, adding a character-type `year` variable, a numeric `month` variable, and a numeric `month by year` variable(Jan-Dec, coded as 1-12). DO NOT RUN THIS CODE if avgAll and avgAll2020 are present in the air data folder.
avgAll <- left_join(avgpm25, avg_so2, by="month_year")%>%
left_join(., avg_ozone, by="month_year") %>%
left_join(., avg_no2, by="month_year") %>%
left_join(., avg_co, by="month_year")
library(tidyverse)
library(lubridate)
library(dplyr)
library(readr)
library(reshape2)
avgAll <- read_csv("avgAll <- read_csv("air data/avgAll.csv")
#Julian's Code
#Just run this code :^) with your own file path
avgAll <- read_csv("~/Rstudio/DataScience/proj1.math241/project01-ojkp/air data/avgAll.csv")
avgAll <- read_csv("air_data/avgAll.csv")
library(readr)
avgAll2020 <- read_csv("air_data/avgAll2020.csv")
View(avgAll2020)
avgAll2020 <- read_csv("air_data/avgAll2020.csv")
avgAll$year <- as.character(avgAll$year)
avgAll2020$year <- as.character(avgAll2020$year)
#Julian's Code
#Just run this code :^) with your own file path
avgAll <- read_csv("air_data/avgAll.csv")
avgAll2020 <- read_csv("air_data/avgAll2020.csv")
avgAll$year <- as.character(avgAll$year)
avgAll2020$year <- as.character(avgAll2020$year)
#data from csvs (will need to change location stuff)
fires_full <- read_csv("air_data/fires_full.csv")
#data from csvs (will need to change location stuff)
fires_full <- read_csv("air_data/fires_full.csv")
pollutants_pdx <- read_csv("air_data/pollutants_pdx.csv",
col_types = cols(Source = col_skip(),
`Site ID` = col_skip(), POC = col_skip(),
`Site Name` = col_skip(), DAILY_OBS_COUNT = col_skip(),
PERCENT_COMPLETE = col_skip(), AQS_PARAMETER_CODE = col_skip(),
CBSA_CODE = col_skip(), CBSA_NAME = col_skip(),
STATE_CODE = col_skip(), STATE = col_skip(),
COUNTY_CODE = col_skip(), COUNTY = col_skip(),
SITE_LATITUDE = col_skip(), SITE_LONGITUDE = col_skip()))
#summary statistics
#correlation in 2020 between protected area burnt and each pollutant readings
#aggregating data + merging
pollutant_small20 <- pollutants_2020 %>%
group_by(Date, variable) %>%
summarise(reading = mean(reading, na.rm = TRUE)) %>%
ungroup()
#okay...
#this is a visualization with all the pollutants over all the years compared to wildfires. surely there's something to be gained from this. maybe not tho.
plots <- lapply(unique(pollutants_pdx_melt$variable), function(var) {
ggplot(data = pollutants_pdx_melt[pollutants_pdx_melt$variable == var, ], aes(x = Date, y = reading)) +
geom_line() +
labs(title = paste("Reading for", var),
x = "Date", y = "Reading")
})
# In the proposal we said we'd plot observations for the first, 15th, and last day of each month across one year, and observe whether there is a stark increase in pollutant concentrations during the wildfire season (July-September) and have multiple lines to see which pollutants in particular increase.
#instead of separate lines, separate graphs for unit/interpretability reasons
#data for first 15th and last day of month
pollutants_FML <- pollutants_pdx_melt %>%
mutate(day = day(Date)) %>%
filter(day == 1 | day == 15 | day == max(day)) %>%
select(-day)
#graphing fires
#considering changing severity of fire seasons over years
ggplot(data = fires_full, aes(x=ReportDate, y = tot_ProAcres)) +
geom_line()
fires_full <- fires_full %>%
mutate(year = year(ReportDate))
ggplot(data = fires_full, aes(x=ReportDate, y = tot_ProAcres)) +
geom_line() +
facet_wrap(~year, scales = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5))
# In the proposal we said we'd plot observations for the first, 15th, and last day of each month across one year, and observe whether there is a stark increase in pollutant concentrations during the wildfire season (July-September) and have multiple lines to see which pollutants in particular increase.
#instead of separate lines, separate graphs for unit/interpretability reasons
#data for first 15th and last day of month
pollutants_FML <- pollutants_pdx_melt %>%
mutate(day = day(Date)) %>%
filter(day == 1 | day == 15 | day == max(day)) %>%
select(-day)
#pollutant data stuff/wrangling
pollutants_pdx <- pollutants_pdx %>%
rename(NO2_reading = "Daily Max 1-hour NO2 Concentration",
Ozone_reading = "Daily Max 8-hour Ozone Concentration",
CO_reading = "Daily Max 8-hour CO Concentration",
SO2_reading = "Daily Max 1-hour SO2 Concentration",
PM2.5_reading = "Daily Mean PM2.5 Concentration",
)
pollutants_pdx_melt <- pollutants_pdx %>%
pivot_longer(cols = c(NO2_reading, CO_reading, SO2_reading, PM2.5_reading, Ozone_reading),
names_to = "variable",
values_to = "reading") %>%
filter(!is.na(reading))
pollutants_pdx_melt$Date <- mdy(pollutants_pdx_melt$Date)
pollutants_pdx_melt <- pollutants_pdx_melt %>%
mutate(year = year(Date))
# In the proposal we said we'd plot observations for the first, 15th, and last day of each month across one year, and observe whether there is a stark increase in pollutant concentrations during the wildfire season (July-September) and have multiple lines to see which pollutants in particular increase.
#instead of separate lines, separate graphs for unit/interpretability reasons
#data for first 15th and last day of month
pollutants_FML <- pollutants_pdx_melt %>%
mutate(day = day(Date)) %>%
filter(day == 1 | day == 15 | day == max(day)) %>%
select(-day)
#2017, considering trends in just one year, can be altered for whichever year
ggplot(pollutants_FML %>%
filter(year == 2017), aes(x = Date, y = reading, color = variable)) +
geom_line() +
facet_wrap(~ variable + year, scales = "free") +
labs(title = "Observations for First, 15th, and Last Day of Each Month",
x = "Date", y = "Reading") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5))
#on one super mega huge giant ggplot to see how this holds up across years
ggplot(pollutants_FML, aes(x = Date, y = reading, color = variable)) +
geom_line() +
facet_wrap(~ variable + year, scales = "free") +
labs(title = "Observations for First, 15th, and Last Day of Each Month",
x = "Date", y = "Reading") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5))
#okay...
#this is a visualization with all the pollutants over all the years compared to wildfires. surely there's something to be gained from this. maybe not tho.
plots <- lapply(unique(pollutants_pdx_melt$variable), function(var) {
ggplot(data = pollutants_pdx_melt[pollutants_pdx_melt$variable == var, ], aes(x = Date, y = reading)) +
geom_line() +
labs(title = paste("Reading for", var),
x = "Date", y = "Reading")
})
fire_plot <- ggplot(data = fires_full, aes(x = ReportDate, y = tot_ProAcres)) +
geom_line(color = "red") +
labs(title = "Total Protected Acres Burnt",
x = "Date", y = "Total Protected Acres")
library(gridExtra)
grid.arrange(arrangeGrob(grobs = plots, ncol = 1), fire_plot, heights = c(4, 1))
#this is that same nonsense but just for 2020:
pollutants_2020 <- pollutants_pdx_melt %>%
filter(year(Date) == 2020)
plots <- lapply(unique(pollutants_2020$variable), function(var) {
ggplot(data = pollutants_2020[pollutants_2020$variable == var, ], aes(x = Date, y = reading)) +
geom_line() +
labs(title = paste("Reading for", var, "in 2020"),
x = "Date", y = "Reading")
})
fire_plot <- ggplot(data = fires_full[fires_full$year == 2020, ], aes(x = ReportDate, y = tot_ProAcres)) +
geom_line(color = "red") +
labs(title = "Total Protected Acres Burnt in 2020",
x = "Date", y = "Total Protected Acres")
grid.arrange(arrangeGrob(grobs = plots, ncol = 1), fire_plot, heights = c(4, 1))
#summary statistics
#correlation in 2020 between protected area burnt and each pollutant readings
#aggregating data + merging
pollutant_small20 <- pollutants_2020 %>%
group_by(Date, variable) %>%
summarise(reading = mean(reading, na.rm = TRUE)) %>%
ungroup()
fires_small20 <- fires_full[fires_full$year == 2020, ] %>%
group_by(ReportDate) %>%
summarise(tot_ProAcres = sum(tot_ProAcres, na.rm = TRUE)) %>%
ungroup()
merged_data <- merge(pollutant_small20, fires_small20, by.x = "Date", by.y = "ReportDate", all = TRUE)
# Calculate correlation coefficients for each pollutant variable
correlations <- lapply(unique(merged_data$variable), function(var) {
pollutant_data <- merged_data %>%
filter(variable == var)
correlation <- cor.test(pollutant_data$reading, pollutant_data$tot_ProAcres)$estimate
data.frame(Pollutant = var, Correlation = correlation)
})
correlations_df <- do.call(rbind, correlations)
print(correlations_df)
#okay...
#this is a visualization with all the pollutants over all the years compared to wildfires. surely there's something to be gained from this. maybe not tho.
plots <- lapply(unique(pollutants_pdx_melt$variable), function(var) {
ggplot(data = pollutants_pdx_melt[pollutants_pdx_melt$variable == var, ], aes(x = Date, y = reading)) +
geom_line() +
labs(title = paste("Reading for", var),
x = "Date", y = "Reading")
})
fire_plot <- ggplot(data = fires_full, aes(x = ReportDate, y = tot_ProAcres)) +
geom_line(color = "red") +
labs(title = "Total Protected Acres Burnt",
x = "Date", y = "Total Protected Acres")
library(gridExtra)
grid.arrange(arrangeGrob(grobs = plots, ncol = 1), fire_plot, heights = c(4, 1))
#this is that same nonsense but just for 2020:
pollutants_2020 <- pollutants_pdx_melt %>%
filter(year(Date) == 2020)
plots <- lapply(unique(pollutants_2020$variable), function(var) {
ggplot(data = pollutants_2020[pollutants_2020$variable == var, ], aes(x = Date, y = reading)) +
geom_line() +
labs(title = paste("Reading for", var, "in 2020"),
x = "Date", y = "Reading")
})
fire_plot <- ggplot(data = fires_full[fires_full$year == 2020, ], aes(x = ReportDate, y = tot_ProAcres)) +
geom_line(color = "red") +
labs(title = "Total Protected Acres Burnt in 2020",
x = "Date", y = "Total Protected Acres")
grid.arrange(arrangeGrob(grobs = plots, ncol = 1), fire_plot, heights = c(4, 1))
#data from csvs (will need to change location stuff)
fires_full <- read_csv("air_data/fires_full.csv")
pollutants_pdx <- read_csv("air_data/pollutants_pdx.csv",
col_types = cols(Source = col_skip(),
`Site ID` = col_skip(), POC = col_skip(),
`Site Name` = col_skip(), DAILY_OBS_COUNT = col_skip(),
PERCENT_COMPLETE = col_skip(), AQS_PARAMETER_CODE = col_skip(),
CBSA_CODE = col_skip(), CBSA_NAME = col_skip(),
STATE_CODE = col_skip(), STATE = col_skip(),
COUNTY_CODE = col_skip(), COUNTY = col_skip(),
SITE_LATITUDE = col_skip(), SITE_LONGITUDE = col_skip()))
#pollutant data stuff/wrangling
pollutants_pdx <- pollutants_pdx %>%
rename(NO2_reading = "Daily Max 1-hour NO2 Concentration",
Ozone_reading = "Daily Max 8-hour Ozone Concentration",
CO_reading = "Daily Max 8-hour CO Concentration",
SO2_reading = "Daily Max 1-hour SO2 Concentration",
PM2.5_reading = "Daily Mean PM2.5 Concentration",
)
pollutants_pdx_melt <- pollutants_pdx %>%
pivot_longer(cols = c(NO2_reading, CO_reading, SO2_reading, PM2.5_reading, Ozone_reading),
names_to = "variable",
values_to = "reading") %>%
filter(!is.na(reading))
pollutants_pdx_melt$Date <- mdy(pollutants_pdx_melt$Date)
pollutants_pdx_melt <- pollutants_pdx_melt %>%
mutate(year = year(Date))
#graphing fires
#considering changing severity of fire seasons over years
ggplot(data = fires_full, aes(x=ReportDate, y = tot_ProAcres)) +
geom_line()
fires_full <- fires_full %>%
mutate(year = year(ReportDate))
ggplot(data = fires_full, aes(x=ReportDate, y = tot_ProAcres)) +
geom_line() +
facet_wrap(~year, scales = "free_x") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5))
# In the proposal we said we'd plot observations for the first, 15th, and last day of each month across one year, and observe whether there is a stark increase in pollutant concentrations during the wildfire season (July-September) and have multiple lines to see which pollutants in particular increase.
#instead of separate lines, separate graphs for unit/interpretability reasons
#data for first 15th and last day of month
pollutants_FML <- pollutants_pdx_melt %>%
mutate(day = day(Date)) %>%
filter(day == 1 | day == 15 | day == max(day)) %>%
select(-day)
#2017, considering trends in just one year, can be altered for whichever year
ggplot(pollutants_FML %>%
filter(year == 2017), aes(x = Date, y = reading, color = variable)) +
geom_line() +
facet_wrap(~ variable + year, scales = "free") +
labs(title = "Observations for First, 15th, and Last Day of Each Month",
x = "Date", y = "Reading") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5))
#on one super mega huge giant ggplot to see how this holds up across years
ggplot(pollutants_FML, aes(x = Date, y = reading, color = variable)) +
geom_line() +
facet_wrap(~ variable + year, scales = "free") +
labs(title = "Observations for First, 15th, and Last Day of Each Month",
x = "Date", y = "Reading") +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5))
#okay...
#this is a visualization with all the pollutants over all the years compared to wildfires. surely there's something to be gained from this. maybe not tho.
plots <- lapply(unique(pollutants_pdx_melt$variable), function(var) {
ggplot(data = pollutants_pdx_melt[pollutants_pdx_melt$variable == var, ], aes(x = Date, y = reading)) +
geom_line() +
labs(title = paste("Reading for", var),
x = "Date", y = "Reading")
})
fire_plot <- ggplot(data = fires_full, aes(x = ReportDate, y = tot_ProAcres)) +
geom_line(color = "red") +
labs(title = "Total Protected Acres Burnt",
x = "Date", y = "Total Protected Acres")
library(gridExtra)
grid.arrange(arrangeGrob(grobs = plots, ncol = 1), fire_plot, heights = c(4, 1))
#this is that same nonsense but just for 2020:
pollutants_2020 <- pollutants_pdx_melt %>%
filter(year(Date) == 2020)
plots <- lapply(unique(pollutants_2020$variable), function(var) {
ggplot(data = pollutants_2020[pollutants_2020$variable == var, ], aes(x = Date, y = reading)) +
geom_line() +
labs(title = paste("Reading for", var, "in 2020"),
x = "Date", y = "Reading")
})
fire_plot <- ggplot(data = fires_full[fires_full$year == 2020, ], aes(x = ReportDate, y = tot_ProAcres)) +
geom_line(color = "red") +
labs(title = "Total Protected Acres Burnt in 2020",
x = "Date", y = "Total Protected Acres")
grid.arrange(arrangeGrob(grobs = plots, ncol = 1), fire_plot, heights = c(4, 1))
#summary statistics
#correlation in 2020 between protected area burnt and each pollutant readings
#aggregating data + merging
pollutant_small20 <- pollutants_2020 %>%
group_by(Date, variable) %>%
summarise(reading = mean(reading, na.rm = TRUE)) %>%
ungroup()
fires_small20 <- fires_full[fires_full$year == 2020, ] %>%
group_by(ReportDate) %>%
summarise(tot_ProAcres = sum(tot_ProAcres, na.rm = TRUE)) %>%
ungroup()
merged_data <- merge(pollutant_small20, fires_small20, by.x = "Date", by.y = "ReportDate", all = TRUE)
# Calculate correlation coefficients for each pollutant variable
correlations <- lapply(unique(merged_data$variable), function(var) {
pollutant_data <- merged_data %>%
filter(variable == var)
correlation <- cor.test(pollutant_data$reading, pollutant_data$tot_ProAcres)$estimate
data.frame(Pollutant = var, Correlation = correlation)
})
correlations_df <- do.call(rbind, correlations)
print(correlations_df)
#The wonderful code below combines all of the avg_XPOLLUTANT datasets from data_cleanup, into one dataframe, adding a character-type `year` variable, a numeric `month` variable, and a numeric `month by year` variable(Jan-Dec, coded as 1-12). DO NOT RUN THIS CODE if avgAll and avgAll2020 are present in the air data folder.
avgAll <- left_join(avgpm25, avg_so2, by="month_year")%>%
left_join(., avg_ozone, by="month_year") %>%
left_join(., avg_no2, by="month_year") %>%
left_join(., avg_co, by="month_year")
library(tidyverse)
library(lubridate)
library(dplyr)
library(readr)
library(reshape2)
library(viridis)
#The wonderful code below combines all of the avg_XPOLLUTANT datasets from data_cleanup, into one dataframe, adding a character-type `year` variable, a numeric `month` variable, and a numeric `month by year` variable(Jan-Dec, coded as 1-12). DO NOT RUN THIS CODE if avgAll and avgAll2020 are present in the air data folder.
avgAll <- left_join(avgpm25, avg_so2, by="month_year")%>%
left_join(., avg_ozone, by="month_year") %>%
left_join(., avg_no2, by="month_year") %>%
left_join(., avg_co, by="month_year")
#Just run this code :^) with your own file path
avgAll <- read_csv("~/Documents/GitHub/project01-ojkp/air data/avgAll.csv")
#Just run this code :^) with your own file path
avgAll <- read_csv("air_data/avgAll.csv")
avgAll2020 <- read_csv("air_data/avgAll2020.csv")
avgAll$year <- as.character(avgAll$year)
avgAll2020$year <- as.character(avgAll2020$year)
#INTRO: COVID-19 and it's effects have impacted us all. As with any pandemic, the primary concerns worldwide were largely related to public health and economic welfare. Like many other nations, the U.S met the the concerns of the former, by enacting state-by-state quarantines("stay-at-home" orders). Subsequently, major metropolitan centers in the nation characterized by greater motor-vehicle traffic, experienced a dramatic dip in commuter density as quarantine mandates went into effect and drastically fewer commuters had to drive to work each day. One impact of COVID-19 that has yet to be discussed as severely as the others, is its impact on our climate; particularly, on air quality. A popular assumption, is that air quality improved during this time, as less commuters were "on the road", and so less vehicles were used and emitting pollutants. We are interested in exploring this assumption by analyzing the concentration levels of major pollutants produced by motor-vehicles(namely, the variables PM2.5, SO2, NO2, CO, and Ozone), before, during, and after quarantine, using our chosen dataset.
#Approach: Our underlying assumption, is that because fewer pollutants were emitted into the atmosphere in Portland, from March 2020 - June 2021(span of Oregon state quarantine mandate). Our dataset offers average pollutant concentrations by month, over sever years(2017 Jan - 2023 Dec). In our first graph we have chosen to focus on PM2.5 concentrations over this 7-year window, since this is the most hazardous and prominent pollutant that motor-vehicles emit—additionally, we'd like to observe its trends in recent history, through the quarantine, and afterward, to identify any contrasts. We are visualizing this data by a column graph, such that each column is a month, sectioned by color and year, with markers indicating the beginning and end of Oregon's quarantine. Our second graph(a collection of three plots) explores concentration trends by the other pollutants, over each year in the immediate window around quarantine(2019,2020,2021). This is done via a trend line, overlayed by columns to distinguish monthly concentrations readings. Both of these plots help us better visualize trends in major pollutant concentrations over time, which services our primary goal of comparing pollutant trends before, during, and after quarantine.
#FIRST GRAPH
ggplot(avgAll,aes(x =month, y = avg_pm2.5, fill=year)) +
geom_col(width=.7, show.legend = FALSE)+
scale_fill_viridis_d() +
scale_x_continuous(breaks = c(1, 13, 25, 37, 49,61,73, 84), labels = c("1"="2017","13"="2018","25"="2019","37"="2020","49"="2021","61"="2022","73"="2023","84"="2024"))+
theme_linedraw()+
labs(title = "Concentration of Airborne Fine Particles(PM2.5) in Portland, OR",
subtitle="From 2017 to 2024",
x = "Year",
y = "Average PM2.5 Concentration(µg/m³)") +
guides(color = "none")+
theme(axis.title.y = element_text(size=10,margin=margin(r=20)),
axis.title.x = element_text(size=10,margin=margin(t=15)))+
geom_point(aes(x=39,y=40), show.legend = FALSE, color="#21918c", shape=6)+
annotate("segment", x = 39, xend = 39, y = 39, yend = 5.8, color = "#21918c", linewidth = .5, linetype="dashed") +
geom_rect(aes(xmin=27, xmax=37, ymin=38, ymax=44 ), fill="#21918c", alpha=0.008)+
annotate("text", x = 32, y = 41, label = "Quarantine Begins\n (March 2020)", size=2)+
geom_point(aes(x=54,y=40), show.legend = FALSE, color="#5ec962", shape=6)+
annotate("segment", x = 54, xend = 54, y = 39, yend = 4.3, color = "#5ec962", linewidth = .5, linetype="dashed") +
geom_rect(aes(xmin=56, xmax=66, ymin=38, ymax=44 ), fill="#5ec962", alpha=0.008)+
annotate("text", x = 61, y = 41, label = "Quarantine Ends\n (June 2021)", size=2)
#KIANNA's FIRST GRAPH
ggplot(avgAll,aes(x =month, y = avg_co, fill=year)) +
geom_col(width=.7, show.legend = FALSE)+
scale_fill_manual(values =c("#33302E", "#320a5e", "#781c6d", "#bc3754", "#ed6925","#fbb61a","#fcffa4"))+
scale_x_continuous(breaks = c(1, 13, 25, 37, 49,61,73, 84), labels = c("1"="2017","13"="2018","25"="2019","37"="2020","49"="2021","61"="2022","73"="2023","84"="2024"))+
theme_linedraw()+
labs(title = "Concentration of Carbon Monoxide(CO) in Portland, OR",
subtitle="From 2017 to 2024",
x = "Year",
y = "Average CO Concentration(ppbv)") +
guides(color = "none")+
theme(axis.title.y = element_text(size=10,margin=margin(r=20)),
axis.title.x = element_text(size=10,margin=margin(t=15)))+
theme(
panel.background = element_rect(fill = "black"),  # Background color
plot.background = element_rect(fill = "black"),  # Plot area color
text = element_text(color = "white"),
axis.text = element_text(color = "white"),        # Axis text color
axis.line = element_line(color = "white"),        # Axis line color
panel.grid.major = element_line(color = "white"), # Major grid line color
panel.grid.minor = element_line(color = "white"))  +
annotate("segment", x = 19, xend = 19, y = .75, yend = 0.3, color = "white", linewidth = .5, linetype="dashed") +
annotate("segment", x = 21, xend = 21, y = .75, yend = 0.4, color = "white", linewidth = .5, linetype="dashed") +
annotate("segment", x = 19, xend = 21, y = .75, yend = 0.75, color = "white", linewidth = .5) +
geom_rect(aes(xmin=10, xmax=20, ymin=.8, ymax=1 ), fill="white", alpha=0.05)+
annotate("text", x = 15, y = .9, label = "Regular Wildfire\n Season", size=2)+
geom_point(aes(x=20,y=.775), show.legend = FALSE, color="white", shape=6, size=.5)+
annotate("segment", x = 67, xend = 67, y = .75, yend = 0.1, color = "white", linewidth = .5, linetype="dashed") +
annotate("segment", x = 69, xend = 69, y = .75, yend = 0.2, color = "white", linewidth = .5, linetype="dashed") +
annotate("segment", x = 67, xend = 69, y = .75, yend = 0.75, color = "white", linewidth = .5) +
geom_rect(aes(xmin=68, xmax=78, ymin=.8, ymax=1 ), fill="white", alpha=0.05)+
annotate("text", x = 73, y = .9, label = "Regular Wildfire\n Season", size=2)+
geom_point(aes(x=68,y=.775), show.legend = FALSE, color="white", shape=6, size=.5)+
annotate("segment", x = 45.5, xend = 58, y = 1.75, yend = 2, color = "red", linewidth = .5) +
geom_rect(aes(xmin=55, xmax=65, ymin=2, ymax=2.2 ), fill="red", alpha=0.05)+
annotate("text", x = 60, y = 2.1, label = "Archie Creek Fire\n(September 2020)", size=2)+
geom_point(aes(x=45.5,y=1.75), show.legend = FALSE, color="red", size=.5)
#This is a better visualization. Noticing form the last graph that, "something was up," in 2020, I created a visualization that focuses on the different pollutants' levels in 2020, similar to the second graph in this document. I first melted the data frame to a longer form, and faceted by the pollutant levels(essentially). This was just a cool ggplot trick.
avgAll2020_melted <- melt(avgAll2020, id.vars = c("year", "monthbyyear"))
avgAll2019 <- avgAll%>%
filter(year==2019)%>%
select(year,monthbyyear,avg_pm2.5,avg_so2,avg_ozone,avg_co,avg_no2)
avgAll2019_melted <- melt(avgAll2019, id.vars = c("year", "monthbyyear"))
avgAll2021 <- avgAll%>%
filter(year==2021)%>%
select(year,monthbyyear,avg_pm2.5,avg_so2,avg_ozone,avg_co,avg_no2)
avgAll2021_melted <- melt(avgAll2021, id.vars = c("year", "monthbyyear"))
avgAll2019_melted <- avgAll2019_melted %>%
mutate(variable = case_when(
variable == "avg_pm2.5" ~ "Particulate Matter(PM2.5)",
variable == "avg_so2" ~ "Sulfur Dioxide(SO2)",
variable == "avg_no2" ~ "Nitrogen Dioxide(NO2)",
variable == "avg_ozone" ~ "Ozone",
variable == "avg_co" ~ "Carbon Monoxide(CO)",
))
avgAll2020_melted <- avgAll2020_melted %>%
mutate(variable = case_when(
variable == "avg_pm2.5" ~ "Particulate Matter(PM2.5)",
variable == "avg_so2" ~ "Sulfur Dioxide(SO2)",
variable == "avg_no2" ~ "Nitrogen Dioxide(NO2)",
variable == "avg_ozone" ~ "Ozone",
variable == "avg_co" ~ "Carbon Monoxide(CO)",
))
avgAll2021_melted <- avgAll2021_melted %>%
mutate(variable = case_when(
variable == "avg_pm2.5" ~ "Particulate Matter(PM2.5)",
variable == "avg_so2" ~ "Sulfur Dioxide(SO2)",
variable == "avg_no2" ~ "Nitrogen Dioxide(NO2)",
variable == "avg_ozone" ~ "Ozone",
variable == "avg_co" ~ "Carbon Monoxide(CO)",
))
ggplot(avgAll2019_melted , aes(x = monthbyyear, y = value, fill = variable)) +
geom_col() +
facet_wrap(variable ~ ., scales = "free_y") +
geom_smooth()+
scale_x_continuous(breaks = c(1, 2, 3, 4,5,6,7,8,9,10,11,12), labels = c("1" = "Jan", "2" = "Feb","3" = "Mar", "4" = "Apr","5" = "May","6" = "Jun","7" = "Jul","8" = "Aug","9" = "Sep","10" = "Oct","11" = "Nov","12" = "Dec"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5))+
scale_fill_viridis_d()+
theme_linedraw()+
theme(panel.grid = element_blank())+
labs(x="", title="Concentration Trends by Pollutant",fill="Pollutant",subtitle="For the Year 2019",y="Concentration by Pollutant")+
#REMOVES X-LABELS
theme(axis.text.x = element_blank(),
#CHANGE MY LEGEND BORDER COLOR AND LINE THICKNESS
legend.box.background = element_rect(color = "black", size = 1),
legend.box.margin = margin(6, 6, 6, 6),
#CHANGE THE POSITION OF THE LEGEND
legend.position = c(.85, .2) ,
legend.text = element_text(color = "black", size = 7),  # Legend text color and size
legend.title = element_text(color = "black"),           # Legend title color
legend.key.size = unit(0.4, "cm"))
ggplot(avgAll2020_melted , aes(x = monthbyyear, y = value, fill = variable)) +
geom_col() +
facet_wrap(variable ~ ., scales = "free_y") +
geom_smooth()+
scale_x_continuous(breaks = c(1, 2, 3, 4,5,6,7,8,9,10,11,12), labels = c("1" = "Jan", "2" = "Feb","3" = "Mar", "4" = "Apr","5" = "May","6" = "Jun","7" = "Jul","8" = "Aug","9" = "Sep","10" = "Oct","11" = "Nov","12" = "Dec"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5))+
scale_fill_viridis_d()+
theme_linedraw()+
theme(panel.grid = element_blank())+
labs(x="", title="Concentration Trends by Pollutant",fill="Pollutant",subtitle="For the Year 2020",y="Concentration by Pollutant")+
#REMOVES X-LABELS
theme(axis.text.x = element_blank(),
#CHANGE MY LEGEND BORDER COLOR AND LINE THICKNESS
legend.box.background = element_rect(color = "black", size = 1),
legend.box.margin = margin(6, 6, 6, 6),
#CHANGE THE POSITION OF THE LEGEND
legend.position = c(.85, .2) ,
legend.text = element_text(color = "black", size = 7),  # Legend text color and size
legend.title = element_text(color = "black"),           # Legend title color
legend.key.size = unit(0.4, "cm"))
ggplot(avgAll2021_melted , aes(x = monthbyyear, y = value, fill = variable)) +
geom_col() +
facet_wrap(variable ~ ., scales = "free_y") +
geom_smooth()+
scale_x_continuous(breaks = c(1, 2, 3, 4,5,6,7,8,9,10,11,12), labels = c("1" = "Jan", "2" = "Feb","3" = "Mar", "4" = "Apr","5" = "May","6" = "Jun","7" = "Jul","8" = "Aug","9" = "Sep","10" = "Oct","11" = "Nov","12" = "Dec"))+
theme(axis.text.x = element_text(angle = 45, hjust = 1, size=5))+
scale_fill_viridis_d()+
theme_linedraw()+
theme(panel.grid = element_blank())+
labs(x="", title="Concentration Trends by Pollutant",fill="Pollutant",subtitle="For the Year 2021",y="Concentration by Pollutant")+
#REMOVES X-LABELS
theme(axis.text.x = element_blank(),
#CHANGE MY LEGEND BORDER COLOR AND LINE THICKNESS
legend.box.background = element_rect(color = "black", size = 1),
legend.box.margin = margin(6, 6, 6, 8),
#CHANGE THE POSITION OF THE LEGEND
legend.position = c(.85, .2),
legend.text = element_text(color = "black", size = 7),  # Legend text color and size
legend.title = element_text(color = "black"),           # Legend title color
legend.key.size = unit(0.4, "cm"))
avgAll%>%
group_by(year)%>%
summarize(AVGPM = mean(avg_pm2.5), AVGCO = mean(avg_co, na.rm=T),AVGNO = mean(avg_no2,na.rm=T),AVGSO = mean(avg_so2,na.rm=T))
